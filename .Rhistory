f3 <- read.csv("f3.csv")
View(f3)
ggplot(f3, aes(y=xjit, x=rjit, colour=type)) +
theme_bw() +
geom_point(alpha=0.35, size=3) +
xlab("Pairwise difference between embryo ages") +
ylab("Pairwise difference between embryo developmental states") +
scale_colour_manual(name="", values=c("red3", "darkblue"), labels=c("Developmental variation absent", "Developmental variation present")) +
theme(  axis.text.x = element_blank(),  axis.text.y = element_blank(), legend.position = "bottom")
library(ggplot2)
install.packages("lazyeval")
library(ggplot2)
ggplot(f3, aes(y=xjit, x=rjit, colour=type)) +
theme_bw() +
geom_point(alpha=0.35, size=3) +
xlab("Pairwise difference between embryo ages") +
ylab("Pairwise difference between embryo developmental states") +
scale_colour_manual(name="", values=c("red3", "darkblue"), labels=c("Developmental variation absent", "Developmental variation present")) +
theme(  axis.text.x = element_blank(),  axis.text.y = element_blank(), legend.position = "bottom")
f3$xjit <- f3$xjit + runif(length(f3$xjit), -2, 2)
ggplot(f3, aes(y=xjit, x=rjit, colour=type)) +
theme_bw() +
geom_point(alpha=0.35, size=3) +
xlab("Pairwise difference between embryo ages") +
ylab("Pairwise difference between embryo developmental states") +
scale_colour_manual(name="", values=c("red3", "darkblue"), labels=c("Developmental variation absent", "Developmental variation present")) +
theme(  axis.text.x = element_blank(),  axis.text.y = element_blank(), legend.position = "bottom")
f3$xjit <- f3$x + runif(length(f3$xjit), -0.02, 0.02)
ggplot(f3, aes(y=xjit, x=rjit, colour=type)) +
theme_bw() +
geom_point(alpha=0.35, size=3) +
xlab("Pairwise difference between embryo ages") +
ylab("Pairwise difference between embryo developmental states") +
scale_colour_manual(name="", values=c("red3", "darkblue"), labels=c("Developmental variation absent", "Developmental variation present")) +
theme(  axis.text.x = element_blank(),  axis.text.y = element_blank(), legend.position = "bottom")
f3$xjit <- f3$xjit + runif(length(f3$xjit), -0.02, 0.02)
ggplot(f3, aes(y=xjit, x=rjit, colour=type)) +
theme_bw() +
geom_point(alpha=0.35, size=3) +
xlab("Pairwise difference between embryo ages") +
ylab("Pairwise difference between embryo developmental states") +
scale_colour_manual(name="", values=c("red3", "darkblue"), labels=c("Developmental variation absent", "Developmental variation present")) +
theme(  axis.text.x = element_blank(),  axis.text.y = element_blank(), legend.position = "bottom")
f3$xjit <- f3$xjit + runif(length(f3$xjit), -0.06, 0.06)
ggplot(f3, aes(y=xjit, x=rjit, colour=type)) +
theme_bw() +
geom_point(alpha=0.35, size=3) +
xlab("Pairwise difference between embryo ages") +
ylab("Pairwise difference between embryo developmental states") +
scale_colour_manual(name="", values=c("red3", "darkblue"), labels=c("Developmental variation absent", "Developmental variation present")) +
theme(  axis.text.x = element_blank(),  axis.text.y = element_blank(), legend.position = "bottom")
f3$xjit <- f3$xjit + runif(length(f3$xjit), -0.1, 0.1)
ggplot(f3, aes(y=xjit, x=rjit, colour=type)) +
theme_bw() +
geom_point(alpha=0.35, size=3) +
xlab("Pairwise difference between embryo ages") +
ylab("Pairwise difference between embryo developmental states") +
scale_colour_manual(name="", values=c("red3", "darkblue"), labels=c("Developmental variation absent", "Developmental variation present")) +
theme(  axis.text.x = element_blank(),  axis.text.y = element_blank(), legend.position = "bottom")
f3$rjit <- f3$rjit + runif(length(f3$xjit), -0.1, 0.1)
ggplot(f3, aes(y=xjit, x=rjit, colour=type)) +
theme_bw() +
geom_point(alpha=0.35, size=3) +
xlab("Pairwise difference between embryo ages") +
ylab("Pairwise difference between embryo developmental states") +
scale_colour_manual(name="", values=c("red3", "darkblue"), labels=c("Developmental variation absent", "Developmental variation present")) +
theme(  axis.text.x = element_blank(),  axis.text.y = element_blank(), legend.position = "bottom")
write.csv(f3, file="f3.csv")
p=ggplot(f3, aes(y=xjit, x=rjit, colour=type)) +
theme_bw() +
geom_point(alpha=0.35, size=3) +
xlab("Pairwise difference between embryo ages") +
ylab("Pairwise difference between embryo developmental states") +
scale_colour_manual(name="", values=c("red3", "darkblue"), labels=c("Developmental variation absent", "Developmental variation present")) +
theme(  axis.text.x = element_blank(),  axis.text.y = element_blank(), legend.position = "bottom")
ggsave(plot=p, height=10, width=10, file="expl.pdf")
#source("https://bioconductor.org/biocLite.R")
#biocLite("DESeq2")
#source("https://bioconductor.org/biocLite.R")
#biocLite("DESeq2")
library(ggplot2)
library(DESeq2)
library(rmarkdown)
library(pracma)
library(gplots)
library(RColorBrewer)
library(reshape2)
library(scales)
library(ggbiplot)
library(gtools)
library(devtools)
library(NanoStringNorm)
library(ggthemes)
library(grid)
library(gridExtra)
library(sjstats)
multiplot <- function(..., plotlist = NULL, file, cols = 1, layout = NULL) {
require(grid)
plots <- c(list(...), plotlist)
numPlots = length(plots)
if (is.null(layout)) {
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots == 1) {
print(plots[[1]])
} else {
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
for (i in 1:numPlots) {
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
gm <- read.csv("gmark.csv")
setwd("~/nstringnov17/ctg5and6")
ct5and6.raw <- read.markup.RCC()
setwd("~/nstringnov17/ctg5hi")
ct5and6hi.raw <- read.markup.RCC()
setwd("~/nstringnov17/ctg7and8")
ct7and8.raw <- read.markup.RCC()
setwd("~/nstringnov17/ctg3and4")
ct3and4.raw <- read.markup.RCC()
lf=Sys.glob("*.gpx")
lf[1]
htmlTreeParse(lf[1],
error = function (...) {}, useInternalNodes = T)
install.packages("XML")
htmlTreeParse(lf[1],
error = function (...) {}, useInternalNodes = T)
library("XML", lib.loc="~/R/win-library/3.4")
htmlTreeParse(lf[1],
error = function (...) {}, useInternalNodes = T)
t <- htmlTreeParse(lf[1],
error = function (...) {}, useInternalNodes = T)
install.packages("lubridate")
library("lubridate", lib.loc="~/R/win-library/3.4")
t <- htmlTreeParse(lf[1],
error = function (...) {}, useInternalNodes = T)
detach("package:lubridate", unload=TRUE)
install.packages("jsonlite")
library(ggplot2)
library(jsonlite)
recipes <-fromJSON(full_format_recipes.json)
library(ggplot2)
library(jsonlite)
recipes <-fromJSON(full_format_recipes.json)
setwd("~/recipes-epi")
recipes <-fromJSON(full_format_recipes.json)
recipes <-fromJSON("full_format_recipes.json")
View(recipes)
recipes$ingredients[1]
allingred <- paste(recipes$ingredients)
head(allingred)
tdm <- TermDocumentMatrix(allingred)
install.packages("tm")
library(tm)
tdm <- TermDocumentMatrix(allingred)
?TermDocumentMatrix
tdm <- TermDocumentMatrix(recipes$ingredients)
tdm <- TermDocumentMatrix(as.matrix(recipes$ingredients))
tdm <- TermDocumentMatrix(as.matrix(recipes$ingredients),removePunctuation = TRUE)
allingred <- termfreq(paste(recipes$ingredients))
allingred <- termFreq(paste(recipes$ingredients))
allingred
head(allingred)
tdm <- TermDocumentMatrix(allingredtf,removePunctuation = TRUE)
allingredtf <- termFreq(paste(recipes$ingredients))
allingredtf <- termFreq(paste(recipes$ingredients))
tdm <- TermDocumentMatrix(allingredtf,removePunctuation = TRUE)
tdm <- TermDocumentMatrix(allingredtf)
allingredtf
data.frame(allingredtf)
head(data.frame(allingredtf))
allingred <- data.frame(allingredtf)
allingred <- data.frame(allingredtf)
allingred <- allingred[order(allingred$allingredtf),]
tail(allingred)
allingred <- allingred[500,]
allingred <- allingred[,500]
allingred$name <- rownames(allingred)
allingred <- data.frame(allingredtf)
allingred$name <- rownames(allingred)
View(allingred)
ingredcorpus <- recipes$ingredients
ingredcorpus
?grep
ingredcorpus <- gsub("[^A-Za-z0-9,;._-]","",ingredcorpus)
gsub("[^A-Za-z0-9,;._-]","",x)
head(ingredcorpus)
ingredcorpus <- paste(recipes$ingredients)
ingredcorpus <- paste(recipes$ingredients)
ingredcorpus <- gsub("[^A-Za-z,;._-]"," ",ingredcorpus)
head(ingredcorpus)
allingredtf <- termFreq(ingredcorpus)
allingred <- data.frame(allingredtf)
allingred$name <- rownames(allingred)
allingred <- allingred[order(allingred$allingredtf),]
View(allingred)
View(allingred)
allingred$name <- gsub("[^A-Za-z,;._-]"," ",allingred$name)
View(allingred)
recipes <-fromJSON("full_format_recipes.json")
ingredcorpus <- paste(recipes$ingredients)
ingredcorpus <- gsub("[^A-Za-z,;._-]"," ",ingredcorpus)
allingredtf <- termFreq(ingredcorpus)
allingred <- data.frame(allingredtf)
allingred$name <- rownames(allingred)
allingred <- allingred[order(allingred$allingredtf),]
ingredcorpus <- paste(recipes$ingredients)
ingredcorpus <- gsub("[^A-Za-z]"," ",ingredcorpus)
allingredtf <- termFreq(ingredcorpus)
allingred <- data.frame(allingredtf)
allingred$name <- rownames(allingred)
allingred <- allingred[order(allingred$allingredtf),]
View(allingred)
nos <- gsub("es$","",allingred$name)
nos <- gsub("es$|s$","",allingred$name)
nos %in% allingred$name
head(nos %in% allingred$name)
View(allingred)
head(nos)
allingred$clean <- aggregate(allingred$allingredtf, by=list(Category=nos), FUN=sum)
nos <- gsub("es$|s$","",allingred$name)
allingred$clean <- aggregate(allingred$allingredtf, by=list(Category=nos), FUN=sum)
allingred$clean <- data.frame(allingred$allingredtf, nos)
allingred$clean <- aggregate(allingred$allingredtf, by=list(Category=allingred$allingredtf), FUN=sum)
allingred <- aggregate(allingred$allingredtf, by=list(Category=allingred$allingredtf), FUN=sum)
View(allingred)
allingredclean <- data.frame(allingred$allingredtf, nos)
View(allingred)
allingredtf <- termFreq(ingredcorpus)
allingred <- data.frame(allingredtf)
allingred$name <- rownames(allingred)
allingred <- allingred[order(allingred$allingredtf),]
allingredc <- allingred
allingredc$name <- gsub("es$|s$","",allingred$name)
?aggregate
ai <- aggregate(allingredc$allingredtf, by=list(Category=allingredc$name), FUN=sum)
View(ai)
allingredc <- allingredc[order(allingredc),]
allingredc <- aggregate(allingredc$allingredtf, by=list(Category=allingredc$name), FUN=sum)
allingredc <- allingredc[order(allingredc),]
allingredc <- aggregate(allingredc$allingredtf, by=list(Category=allingredc$name), FUN=sum)
allingredtf <- termFreq(ingredcorpus)
allingred <- data.frame(allingredtf)
allingred$name <- rownames(allingred)
allingred <- allingred[order(allingred$allingredtf),]
allingredc <- allingred
allingredc$name <- gsub("es$|s$","",allingred$name)
allingredc <- aggregate(allingredc$allingredtf, by=list(Category=allingredc$name), FUN=sum)
allingredc <- allingredc[order(allingredc$Category),]
View(allingredc)
allingredc <- allingredc[order(allingredc$x),]
View(allingredc)
?order
allingredc <- allingredc[order(allingredc$x, decreasing = TRUE),]
View(allingredc)
write.csv(allingredc, file="allingredc.csv")
allingredclean <- read.csv("allingredcclean.csv")
View(allingredclean)
View(allingredclean)
allingredclean <- subset(allingredclean, allingredclean$Category != "")
allingredclean <- aggregate(allingredclean$Category, by=list(Category=allingredclean$Category), FUN=sum)
View(allingredclean)
allingredclean <- aggregate(allingredclean$x, by=list(Category=allingredclean$Category), FUN=sum)
View(allingredclean)
allingredclean <- allingredc[order(allingredclean$x, decreasing = TRUE),]
View(allingredclean)
allingredclean <- read.csv("allingredcclean.csv")
allingredclean <- subset(allingredclean, allingredclean$Category != "")
allingredclean <- aggregate(allingredclean$x, by=list(Category=allingredclean$Category), FUN=sum)
allingredclean <- allingredclean[order(allingredclean$x, decreasing = TRUE),]
View(allingredclean)
topingred <- subset(allingredclean, allingredclean$x > 100)
View(topingred)
allingredclean <- read.csv("allingredcclean.csv")
allingredclean <- subset(allingredclean, allingredclean$Category != "")
allingredclean <- aggregate(allingredclean$x, by=list(Category=allingredclean$Category), FUN=sum)
allingredclean <- allingredclean[order(allingredclean$x, decreasing = TRUE),]
topingred <- subset(allingredclean, allingredclean$x > 100)
write.csv(topingred, file="topingred.csv")
topingred$plural <- paste(topingred$Category, "s", sep="")
write.csv(topingred, file="topingred.csv")
